{"name":"Win10-uwa-publishercachefolders","tagline":"","body":"# App to App communication in Universal Windows Applications (Windows 10) #\r\n\r\nWindows 10 provides many techniques that developers can use for inter- app communications. Publisher Cache Folders is one such technique. The idea is that A publisher can have multiple applications in Windows Store and they may share common data , settings and other artifacts that could be leveraged across multiple applications. \r\n\r\nWhile using Publisher Cache Folders in your application , here are few things to keep in mind\r\n\r\n-The apps reading/writing or using Publisher Cache Folders needs to be from same publisher.\r\n\r\n-Shared storage location is provisioned automatically when the first app for a given publisher is installed and it will be removed automatically when the last app for a given publisher is uninstalled\r\n\r\n-You are responsible for data management /versioning inside the Publisher Cache Folder.\r\n\r\n-Publisher Cache folder can also live in a SD card\r\n\r\nImplementing Publisher Cache Folders is really easy. In following example I have implemented a simple read write on a text file that is living inside Publisher Cache Folders from 2 different applications.\r\n\r\nAs a first step we will declare the Publisher Cache Folder in the application manifest of each application wanting to use the folder.\r\n\r\n    <Extensions>\r\n    <Extension Category=\"windows.publisherCacheFolders\">\r\n      <PublisherCacheFolders >\r\n        <Folder Name=\"CommonFolder\"/>\r\n      </PublisherCacheFolders>\r\n    </Extension>\r\n</Extensions>\r\n\r\n\r\nNow folder is available for us to be utilized from different applications. Writing to the folder from App1\r\n\r\n      async void WritetoPublisherFolder()\r\n        {\r\n            StorageFolder SharedFolder = Windows.Storage.ApplicationData.Current.GetPublisherCacheFolder(\"CommonFolder\");\r\n            StorageFile newFile = await SharedFolder.CreateFileAsync(\"SharedFile.txt\", CreationCollisionOption.OpenIfExists);\r\n            await FileIO.WriteTextAsync(newFile, textBox.Text.ToString());\r\n        }\r\n\r\nReading from Folder from App2\r\n\r\n       async void ReadFromSharedFolder()\r\n        {\r\n\r\n\r\n            StorageFolder SharedFolder = Windows.Storage.ApplicationData.Current.GetPublisherCacheFolder(\"CommonFolder\");\r\n            StorageFile newFile = await SharedFolder.GetFileAsync(\"SharedFile.txt\");\r\n            var text= await FileIO.ReadTextAsync(newFile);\r\n            textBlock.Text= await FileIO.ReadTextAsync(newFile); ;\r\n            \r\n        }\r\n\r\nPublisher Cache Folders opens up many scenarios for the developers building multiple applications and sharing the data among those applications.\r\n\r\n\r\n\r\n  \r\n\r\n   \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}